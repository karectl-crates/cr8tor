"""Module with functions to initiate a CR8 project"""

from datetime import datetime
from typing import Annotated
from pathlib import Path
import cr8tor.core.schema as schemas
import git
import typer
from cookiecutter.main import cookiecutter
import requests

app = typer.Typer()


@app.command(name="init")
def init(
    template_path: Annotated[
        str,
        typer.Option(
            default="-t",
            help="GitHub URL or relative path to cr8-cookiecutter template",
            prompt=True,
        ),
    ],
    push_to_github: Annotated[
        bool,
        typer.Option(
            "--push/--no-push",
            help="Flag to indicate if the project should be pushed to GitHub",
        ),
    ] = False,
    pat_token: Annotated[
        str,
        typer.Option(
            "-pat",
            help="GitHub personal access token",
            hide_input=True,
        ),
    ] = None,
    git_org: Annotated[
        str,
        typer.Option(
            "-org",
            help="Target github organisation name",
            hide_input=True,
        ),
    ] = None,
):
    """
    Initialize a new CR8 project using a specified cookiecutter template.
    Args:
        template_path (str): The GitHub URL or relative path to the cr8-cookiecutter template.
                             This is prompted from the user if not provided.
    The function generates a new project by applying the specified cookiecutter template.
    It also adds a timestamp to the context used by the template.
    If `push_to_github` is True, it will also create a GitHub repository under the `lsc-sde-crates`
    organization and push the generated project to GitHub using the provided personal access token.
    """

    extra_context = {
        "__timestamp": datetime.now().isoformat(timespec="seconds"),
        "__cr8_cc_template": template_path,
    }

    # Generate the project with cookiecutter
    project_dir = cookiecutter(
        template_path,
        extra_context=extra_context,
    )
    project_resources = Path(project_dir).joinpath("resources")
    project_resource_path = project_resources.joinpath("governance", "project.toml")
    project_dict = project_resources.read_resource_entity(
        project_resource_path, "project"
    )
    project_info = schemas.ProjectProps(**project_dict)

    if push_to_github and pat_token and project_info.project and git_org:
        (create_and_push_project(project_dir, pat_token, project_info, git_org),)


def create_and_push_project(
    project_dir: str, pat_token: str, repo_name: str, git_org: str
):
    """
    Create a new GitHub repository under the `lsc-sde-crates` organization and push the local directory to it.
    Args:
        project_dir (str): The local project directory generated by cookiecutter.
        pat_token (str): The GitHub personal access token.
        repo_name (str): The desired repository name.
    """

    # Step 1: Create a new repository under the organization
    repo_url = f"https://api.github.com/orgs/{git_org}/repos"
    headers = {
        "Authorization": f"token {pat_token}",
        "Accept": "application/vnd.github.v3+json",
    }
    payload = {
        "name": repo_name,
        "private": False,  # You can adjust this to make it private if needed
    }

    response = requests.post(repo_url, json=payload, headers=headers)

    if response.status_code == 201:
        print(f"GitHub repository '{git_org}/{repo_name}' created successfully.")
    else:
        print(f"Failed to create GitHub repository: {response.json()}")
        return

    # Step 2: Initialize git, add, commit and push the local project
    repo_http_url = response.json()["clone_url"]
    try:
        repo = git.Repo.init(project_dir)
        repo.git.add(A=True)
        repo.index.commit("Initial commit")

        origin = repo.create_remote("origin", repo_http_url)
        origin.push(refspec="HEAD:main")
        print(f"Project pushed to GitHub repository '{git_org}/{repo_name}'.")
    except Exception as e:
        print(f"An error occurred while pushing to GitHub: {e}")
