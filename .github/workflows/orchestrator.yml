name: Orchestrate Data Load

on:
  workflow_call:
    inputs:
      environment:
         required: true
         default: 'DEV'
         type: string
      cr8tor_branch:
         required: false
         type: string

env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Set GH_TOKEN for GitHub CLI authentication
    APPROVALS_API_TOKEN: ${{ secrets[format('APPROVALS_API_TOKEN_{0}', inputs.environment)] }}
    APPROVALS_HOST: ${{ secrets[format('APPROVALS_HOST_{0}', inputs.environment)] }}

permissions:
    contents: write
    issues: write
    pull-requests: write

jobs:
    Validate:
        if: github.ref == 'refs/heads/main' # Ensures the workflow only runs on the main branch
        runs-on: ${{ inputs.environment }}-cr8tor-vm
        outputs:
          branch_name: ${{ steps.create_branch.outputs.branch_name }}
          timestamp: ${{ steps.create_branch.outputs.timestamp }}
          pr_url: ${{ steps.create_pr.outputs.pr_url }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                ref: main

            - name: Create a new temp branch
              id: create_branch
              run: |
                git config --global user.name "${{ github.repository_owner }} Governance Actions"
                git config --global user.email "${{ github.repository_owner }}-actions@github.com"

                $timestamp = "$((Get-Date).ToString('yyyyMMddHHmmss'))"
                $branchName = "temp-$timestamp-validate"
                git checkout -B $branchName
                git push origin $branchName
                echo "branch_name=$branchName" >> $env:GITHUB_OUTPUT
                echo "timestamp=$timestamp" >> $env:GITHUB_OUTPUT

            - name: Setup uv
              uses: astral-sh/setup-uv@v5
              with:
                version: "0.5.16"

            - name: Clone cr8tor repository (specific branch)
              if: ${{ inputs.cr8tor_branch != '' }}
              run: |
                git clone --branch ${{ inputs.cr8tor_branch }} https://github.com/${{ github.repository_owner }}/cr8tor.git

            - name: Clone cr8tor repository (default branch)
              if: ${{ inputs.cr8tor_branch == '' }}
              run: |
                git clone --branch develop https://github.com/${{ github.repository_owner }}/cr8tor.git

            - name: Sync cr8tor repository
              run: |
                uv sync --directory cr8tor

            - name: Cr8tor CLI Create & Validate
              run: |
                cr8tor\.venv\Scripts\activate
                $certPath = cr8tor\.venv\Scripts\python.exe -m certifi
                $env:SSL_CERT_FILE = $certPath

                # run cr8tor create and capture the error message
                $errorMessage = cr8tor create -a GithubAction -i ./resources 2>&1 | Where-Object { $_ -is [System.Management.Automation.ErrorRecord] } | Out-String

                if ($LASTEXITCODE -ne 0 -and $errorMessage -notlike "*can only be run once on a project*") {
                  echo "::error::Cr8tor create failed: $errorMessage"
                  echo "CR8TOR_ERROR=1" | Out-File -FilePath $env:GITHUB_ENV -Append
                }
                else {
                  # run cr8tor validate and capture the error message
                  $errorMessage = cr8tor validate -a GithubAction -i ./resources 2>&1 | Where-Object { $_ -is [System.Management.Automation.ErrorRecord] } | Out-String
                  if ($LASTEXITCODE -ne 0) {
                    echo "::error::Cr8tor validate failed: $errorMessage"
                    echo "CR8TOR_ERROR=1" | Out-File -FilePath $env:GITHUB_ENV -Append
                  }
                }
              continue-on-error: true

            - name: Push changes to repo
              run: |
                git config --global user.name "${{ github.repository_owner }} Governance Actions"
                git config --global user.email "${{ github.repository_owner }}-actions@github.com"

                git add ./bagit ./resources ./config.toml
                git commit -m "Update after create and validate action"
                git push origin ${{ steps.create_branch.outputs.branch_name }}

            - name: Add GitHub CLI to PATH
              run: |
                if (-not ( $env:Path -split ";" -contains "C:\Program Files\GitHub CLI\" )) {
                  echo "PATH=$env:Path;C:\Program Files\GitHub CLI\" | Out-File -Append -FilePath $env:GITHUB_ENV
                }

            - name: Create PR from temp branch to main
              id: create_pr
              run: |
                $pr_url = (gh pr create --base main --head ${{ steps.create_branch.outputs.branch_name }} `
                  --title "Update main repository for the validated ro-crate details" `
                  --body "Update main repository for the validated ro-crate details")
                echo "pr_url=$pr_url" >> $env:GITHUB_OUTPUT

            - name: Create artifact for validated RO-Crate
              uses: actions/upload-artifact@v4
              with:
                name: ro-crate-validated
                path: |
                    ./bagit
                    ./resources
                    ./config.toml

            - name: Send sign-off message
              run: |
                $repo_url = "https://github.com/${{ github.repository }}/tree/${{ steps.create_branch.outputs.branch_name }}"
                if ($env:CR8TOR_ERROR -eq "1") {
                  # Merge PR and delete temp branch
                  gh pr merge --delete-branch --merge --admin

                  $message = "Please analyse failures logged in the main branch."
                  echo "::error::$message"
                  exit 1
                }
                else {
                  $message = "Please verify and sign off DAR project at $repo_url."
                  $message = $message + " Pull Request: ${{ steps.create_pr.outputs.pr_url }}"
                  echo "::notice::$message"
                }

    SignOff:
        runs-on: ${{ inputs.environment }}-cr8tor-vm
        needs: [Validate]
        environment: signoff
        steps:
            - name: Checkout temp repository
              uses: actions/checkout@v4
              with:
                ref: "${{ needs.Validate.outputs.branch_name }}"
                clean: false

            - name: Add GitHub CLI to PATH
              run: |
                if (-not ( $env:Path -split ";" -contains "C:\Program Files\GitHub CLI\" )) {
                  echo "PATH=$env:Path;C:\Program Files\GitHub CLI\" | Out-File -Append -FilePath $env:GITHUB_ENV
                }

            - name: Cr8tor CLI Sign-Off
              run: |
                cr8tor\.venv\Scripts\activate

                # run cr8tor sign-off and capture the error message
                $errorMessage = cr8tor sign-off -a GithubAction -i ./resources -agreement ${{ needs.Validate.outputs.pr_url }} -signing-entity "cr8-ALL-projects-approver" 2>&1 | Where-Object { $_ -is [System.Management.Automation.ErrorRecord] } | Out-String
                if ($LASTEXITCODE -ne 0) {
                  echo "::error::Cr8tor sign-off failed: $errorMessage"
                  echo "CR8TOR_ERROR=1" | Out-File -FilePath $env:GITHUB_ENV -Append
                }
              continue-on-error: true

            - name: Push changes to repository
              run: |
                git add ./bagit ./resources ./config.toml
                git commit -m "Update after sign off action"
                git push origin ${{ needs.Validate.outputs.branch_name }}

            - name: Merge Pull Request and delete temp branch
              run: |
                # Merge PR and delete temp branch
                gh pr merge --delete-branch --merge --admin

                if ($env:CR8TOR_ERROR -eq "1") {
                  $message = "Please analyse failures logged in the main branch."
                  echo "::error::$message"
                  exit 1
                }

            - name: Create artifact for signed off RO-Crate
              uses: actions/upload-artifact@v4
              with:
                name: ro-crate-signed-off
                path: |
                    ./bagit
                    ./resources
                    ./config.toml

    Workflow-Execution:
        runs-on: ${{ inputs.environment }}-cr8tor-vm
        needs: [Validate, SignOff]
        outputs:
          branch_name: ${{ steps.create_branch.outputs.branch_name }}
          pr_url: ${{ steps.create_pr.outputs.pr_url }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                ref: main
                clean: false

            - name: Create a new temp branch
              id: create_branch
              run: |
                git config --global user.name "${{ github.repository_owner }} Governance Actions"
                git config --global user.email "${{ github.repository_owner }}-actions@github.com"

                $branchName = "temp-${{ needs.Validate.outputs.timestamp }}-stagetransfer"
                git checkout -B $branchName
                git push origin $branchName
                echo "branch_name=$branchName" >> $env:GITHUB_OUTPUT

            - name: Cr8tor CLI Staging Data
              run: |
                cr8tor\.venv\Scripts\activate

                # run cr8tor stage-transfer and capture the error message
                $errorMessage = cr8tor stage-transfer -a GithubAction -i ./resources 2>&1 | Where-Object { $_ -is [System.Management.Automation.ErrorRecord] } | Out-String
                if ($LASTEXITCODE -ne 0) {
                  echo "::error::Cr8tor stage-transfer failed: $errorMessage"
                  echo "CR8TOR_ERROR=1" | Out-File -FilePath $env:GITHUB_ENV -Append
                }
              continue-on-error: true


            - name: Push changes to repo
              run: |
                git add ./bagit ./resources ./config.toml
                git commit -m "Update after staging action"
                git push origin ${{ steps.create_branch.outputs.branch_name }}

            - name: Add GitHub CLI to PATH
              run: |
                if (-not ( $env:Path -split ";" -contains "C:\Program Files\GitHub CLI\" )) {
                  echo "PATH=$env:Path;C:\Program Files\GitHub CLI\" | Out-File -Append -FilePath $env:GITHUB_ENV
                }

            - name: Create PR from temp branch to main
              id: create_pr
              run: |
                $pr_url = (gh pr create --base main --head ${{ steps.create_branch.outputs.branch_name }} `
                  --title "Update main repository for the staged ro-crate details" `
                  --body "Update main repository for the staged ro-crate details" )
                echo "pr_url=$pr_url" >> $env:GITHUB_OUTPUT

            - name: Create artifact for staged RO-Crate
              uses: actions/upload-artifact@v4
              with:
                name: ro-crate-staged
                path: |
                    ./bagit
                    ./resources
                    ./config.toml

            - name: Send disclosure message
              run: |
                $repo_url = "https://github.com/${{ github.repository }}/tree/${{ steps.create_branch.outputs.branch_name }}"
                if ($env:CR8TOR_ERROR -eq "1") {
                  # Merge PR and delete temp branch
                  gh pr merge --delete-branch --merge --admin

                  $message = "Please analyse failures logged in the main branch."
                  echo "::error::$message"
                  exit 1
                }
                else {
                  $message = "Please verify and approve Disclosure stage of DAR project at $repo_url."
                  $message = $message + " Pull Request: ${{ steps.create_pr.outputs.pr_url }}"
                  echo "::notice::$message"
                }

    Disclosure:
        runs-on: ${{ inputs.environment }}-cr8tor-vm
        needs: [Workflow-Execution]
        environment: disclosure
        steps:
          - name: Checkout temp repository
            uses: actions/checkout@v4
            with:
              ref: "${{ needs.Workflow-Execution.outputs.branch_name }}"
              clean: false

          - name: Add GitHub CLI to PATH
            run: |
              if (-not ( $env:Path -split ";" -contains "C:\Program Files\GitHub CLI\" )) {
                echo "PATH=$env:Path;C:\Program Files\GitHub CLI\" | Out-File -Append -FilePath $env:GITHUB_ENV
              }

          - name: Cr8tor CLI Sign-Off
            run: |
              cr8tor\.venv\Scripts\activate

              # run cr8tor disclosure and capture the error message
              $errorMessage = cr8tor disclosure -a GithubAction -i ./resources -agreement ${{ needs.Workflow-Execution.outputs.pr_url }} -signing-entity "cr8-ALL-projects-approver" 2>&1 | Where-Object { $_ -is [System.Management.Automation.ErrorRecord] } | Out-String
              if ($LASTEXITCODE -ne 0) {
                echo "::error::Cr8tor disclosure failed: $errorMessage"
                echo "CR8TOR_ERROR=1" | Out-File -FilePath $env:GITHUB_ENV -Append
              }
            continue-on-error: true


          - name: Push changes to repository
            run: |
              git add ./bagit ./resources ./config.toml
              git commit -m "Update after sign off action"
              git push origin ${{ needs.Workflow-Execution.outputs.branch_name }}

          - name: Merge Pull Request and delete temp branch
            run: |
              # Merge PR and delete temp branch
              gh pr merge --delete-branch --merge --admin

              if ($env:CR8TOR_ERROR -eq "1") {
                $message = "Please analyse failures logged in the main branch."
                echo "::error::$message"
                exit 1
              }

          - name: Create artifact for signed off RO-Crate
            uses: actions/upload-artifact@v4
            with:
              name: ro-crate-disclosed
              path: |
                  ./bagit
                  ./resources
                  ./config.toml


    Publish:
        runs-on: ${{ inputs.environment }}-cr8tor-vm
        needs: [Disclosure, Validate]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                ref: main
                clean: false

            - name: Create a new temp branch
              id: create_branch
              run: |
                git config --global user.name "${{ github.repository_owner }} Governance Actions"
                git config --global user.email "${{ github.repository_owner }}-actions@github.com"

                $branchName = "temp-${{ needs.Validate.outputs.timestamp }}-publish"
                git checkout -B $branchName
                git push origin $branchName
                echo "branch_name=$branchName" >> $env:GITHUB_OUTPUT

            - name: Cr8tor CLI Publish Data
              run: |
                cr8tor\.venv\Scripts\activate

                # run cr8tor publish and capture the error message
                $errorMessage = cr8tor publish -a GithubAction -i ./resources 2>&1 | Where-Object { $_ -is [System.Management.Automation.ErrorRecord] } | Out-String
                if ($LASTEXITCODE -ne 0) {
                  echo "::error::Cr8tor publish failed: $errorMessage"
                  echo "CR8TOR_ERROR=1" | Out-File -FilePath $env:GITHUB_ENV -Append
                }
              continue-on-error: true

            - name: Create artifact for published RO-Crate
              uses: actions/upload-artifact@v4
              with:
                name: ro-crate-published
                path: |
                    ./bagit
                    ./resources
                    ./config.toml

            - name: Push changes to repository
              run: |
                git add ./bagit ./resources ./config.toml
                git commit -m "Update bagit and resources"
                git push origin ${{ steps.create_branch.outputs.branch_name }}

            - name: Add GitHub CLI to PATH
              run: |
                if (-not ( $env:Path -split ";" -contains "C:\Program Files\GitHub CLI\" )) {
                  echo "PATH=$env:Path;C:\Program Files\GitHub CLI\" | Out-File -Append -FilePath $env:GITHUB_ENV
                }

            - name: Create PR from temp branch to main
              id: create_pr
              run: |
                $pr_url = (gh pr create --base main --head ${{ steps.create_branch.outputs.branch_name }} `
                  --title "Update main repository for the published ro-crate details" `
                  --body "Update main repository for the published ro-crate details" )

            - name: Merge Pull Request and delete temp branch
              run: |
                # Merge PR and delete temp branch
                gh pr merge --delete-branch --merge --admin

                if ($env:CR8TOR_ERROR -eq "1") {
                  $message = "Please analyse failures logged in the main branch."
                  echo "::error::$message"
                  exit 1
                }

            - name: Send final message
              run: |
                $message = "Successfully published requested datasets. See logs and audits at https://github.com/${{ github.repository }}."
                echo "::notice::$message"
